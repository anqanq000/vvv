!!ARBfp1.0

TEMP tmp, col;

# stereo interlacing
MAD tmp, fragment.position.xyxy, program.env[2].xyxy, program.env[2].zwzw;
FRC tmp, tmp;
SUB tmp, tmp, 0.5;
KIL tmp;

# get data from 3D textures
TEX tmp.x, fragment.texcoord[0], texture[0], 3D;   # get the scalar value at the back of the slab
TEX tmp.y, fragment.texcoord[1], texture[0], 3D;   # get the scalar value at the front of the slab
TEX tmp.z, fragment.texcoord[2], texture[1], 3D;   # get the gradient magnitude at the mid of the slab

# dependent 3D texture lookup
TEX col, tmp, texture[3], 3D;   # perform 3D dependent texture lookup in pre-integration table

# compute the diffuse and specular illumination factors of a head light
SUB tmp.x, tmp.x, tmp.y;              # calculate frontal gradient (not yet normalized)
ABS tmp.x, tmp.x;                     # use front and back lighting
MUL tmp.x, tmp.x, program.env[0].x;   # scale gradient with the reciprocal of the slab thickness
MAX tmp.z, tmp.z, program.env[0].y;   # neglect small noisy gradients below a threshold
RCP tmp.z, tmp.z;                     # compute the reciprocal of the gradient magnitude
MUL_SAT tmp.x, tmp.x, tmp.z;          # normalize frontal gradient
POW tmp.y, tmp.x, program.env[1].w;   # compute specular highlight

# attenuate the emission with the calculated illumination factors
MAD tmp.x, tmp.x, program.env[1].y, program.env[1].x;   # ambient and diffuse illumination
MAD tmp.x, tmp.y, program.env[1].z, tmp.x;              # specular illumination
MUL col.rgb, col, tmp.x;                                # apply to emission

# write to output register
MUL result.color, col, fragment.color.primary;   # attenuate with primary color

END
